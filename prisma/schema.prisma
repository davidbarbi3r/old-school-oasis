// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  local
  discord
  steam
}

enum Role {
  user
  admin
}

enum ItemCondition {
  sealed
  good
  fair
  poor
  broken
}

enum CompletedItem {
  itemOnly
  itemAndManual
  itemManualAndBox
}

enum WorkingState {
  working
  notWorking
  unknown
}

enum BoughtFrom {
  online
  localStore
  garageSale
  particular
  other
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userName     String       @unique
  email        String       @unique
  hash         String?
  authProvider AuthProvider @default(local)
  isActive     Boolean      @default(true)
  role         Role         @default(user)
  collections  Collection[]

  @@map("users") // this is the name of the table in the database
}

model Collection {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  gamesItems     GameItem[]
  PlatformsItems PlatformItem[]

  @@map("collections")
}

model Game {
  id             Int      @id
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  category       Int?
  description    String?
  storyLine      String?
  rating         Float?
  coverUrl       String?
  websiteUrl     String?
  screenshotUrls String[]
  genres         String[]
  releaseDate    String?

  platforms GamesOnPlatforms[]

  GameItem GameItem[]

  @@map("games") // this is the name of the table in the database
}

model Platform {
  id         Int               @id
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  name       String
  logoUrl    String?
  coverUrl   String?
  versions   PlatformVersion[]
  generation Int?

  games        GamesOnPlatforms[]
  PlatformItem PlatformItem[]
  GameItem     GameItem[]
}

model GamesOnPlatforms {
  game       Game       @relation(fields: [gameId], references: [id])
  gameId     Int
  platform   Platform   @relation(fields: [platformId], references: [id])
  platformId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime   @default(now())
  gameItems  GameItem[]

  @@id([gameId, platformId])
}

model PlatformVersion {
  id               Int            @id
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  name             String
  summary          String?
  interestingFacts String?
  url              String?
  storage          String?
  cpu              String?
  graphics         String?
  firstReleaseDate String?
  discontinuedDate String?
  salesNumber      Int?
  popularGames     String[]
  region           String?
  Platform         Platform?      @relation(fields: [platformId], references: [id])
  platformId       Int?
  PlatformItem     PlatformItem[]
}

model GameItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    Int
  game      Game     @relation(fields: [gameId], references: [id])

  platformId Int
  platform   Platform @relation(fields: [platformId], references: [id])

  gamesOnPlatforms GamesOnPlatforms @relation(fields: [gameId, platformId], references: [gameId, platformId])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  stateId String
  state   GameState @relation(fields: [stateId], references: [id])

  @@map("game_items") // this is the name of the table in the database
}

model PlatformItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  platform   Platform @relation(fields: [platformId], references: [id])
  platformId Int

  versionId Int
  version   PlatformVersion @relation(fields: [versionId], references: [id])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  stateId String
  state   PlatformState @relation(fields: [stateId], references: [id])
}

model GameState {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  completed   CompletedItem
  working     WorkingState
  condition   ItemCondition
  boughtAt    DateTime?
  boughtFrom  BoughtFrom?
  pictures    String[]
  name        String?
  description String?

  games GameItem[]
}

model PlatformState {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  completed   CompletedItem
  working     WorkingState
  condition   ItemCondition
  pictures    String[]
  name        String
  description String

  platforms PlatformItem[]
}
