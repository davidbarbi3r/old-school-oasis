// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthProvider {
  local
  discord
  steam
}

enum Role {
  user
  admin
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userName     String
  email        String       @unique
  hash         String?
  authProvider AuthProvider @default(local)
  isActive     Boolean      @default(true)
  role         Role         @default(user)
  collections  Collection[]

  @@map("users") // this is the name of the table in the database
}

model Collection {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  games GameItem[]

  @@map("collections")
}

model Game {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  description    String
  storyLine      String
  rating         Float
  coverUrl       String
  websiteUrl     String
  screenshotUrls String
  genres         String
  releaseDate    String

  platformsId Int?
  platform    Platform? @relation(fields: [platformsId], references: [id])

  GameItem GameItem[]

  @@map("games") // this is the name of the table in the database
}

model Platform {
  id         Int               @id
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  name       String
  logoUrl    String?
  versions   PlatformVersion[]
  generation Int

  games Game[]
}

model PlatformVersion {
  id               Int       @id
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  name             String
  summary          String?
  url              String?
  storage          String?
  cpu              String?
  graphics         String?
  firstReleaseDate String?
  region           String?
  Platform         Platform? @relation(fields: [platformId], references: [id])
  platformId       Int?
}

model GameItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id])

  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])

  stateId String
  state   State  @relation(fields: [stateId], references: [id])

  @@map("game_items") // this is the name of the table in the database
}

model State {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String

  games GameItem[]
}
